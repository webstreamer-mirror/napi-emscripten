{
    "&binding_utils::createMat": "select_overload<MyClass *(int, int, int, intptr_t, size_t)>(&binding_utils::createMat)",
    "&cv::Mat::rows": "int,cv::Mat::rows",
    "&cv::Mat::cols": "int,cv::Mat::cols",
    "&binding_utils::getMatSize": "select_overload<val(const cv::Mat&)>(&binding_utils::getMatSize)",
    "&binding_utils::getMatStep": "select_overload<val(const cv::Mat&)>(&binding_utils::getMatStep)",
    "&binding_utils::matData<unsigned char>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<unsigned char>)",
    "&binding_utils::matData<char>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<char>)",
    "&binding_utils::matData<unsigned short>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<unsigned short>)",
    "&binding_utils::matData<short>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<short>)",
    "&binding_utils::matData<int>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<int>)",
    "&binding_utils::matData<float>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<float>)",
    "&binding_utils::matData<double>": "select_overload<val(const cv::Mat&)>(&binding_utils::matData<double>)",
    "value_objects": {
        "alias": {
            "Rect": "Rect_<int>",
            "Rect2f": "Rect_<float>"
        },
        "constructor": {
            "Rect": [
                [
                    "const Point&",
                    "const Size&"
                ]
            ]
        }
    },
    "only_default_constructor": [
        "MinMaxLoc",
        "Circle",
        "Moments",
        "Exception"
    ],
    "&cv::Range::start": "int,cv::Range::start",
    "&cv::Range::end": "int,cv::Range::end",
    "&cv::TermCriteria::type": "int,cv::TermCriteria::type",
    "&cv::TermCriteria::maxCount": "int,cv::TermCriteria::maxCount",
    "&cv::TermCriteria::epsilon": "double,cv::TermCriteria::epsilon",
    "&Size::width": "int,Size::width",
    "&Size::height": "int,Size::height",
    "&Size2f::width": "float,Size2f::width",
    "&Size2f::height": "float,Size2f::height",
    "&Point::x": "int,Point::x",
    "&Point::y": "int,Point::y",
    "&Point2f::x": "float,Point2f::x",
    "&Point2f::y": "float,Point2f::y",
    "&cv::Rect_<int>::x": "int,cv::Rect_<int>::x",
    "&cv::Rect_<int>::y": "int,cv::Rect_<int>::y",
    "&cv::Rect_<int>::width": "int,cv::Rect_<int>::width",
    "&cv::Rect_<int>::height": "int,cv::Rect_<int>::height",
    "&cv::Rect_<float>::x": "float,cv::Rect_<float>::x",
    "&cv::Rect_<float>::y": "float,cv::Rect_<float>::y",
    "&cv::Rect_<float>::width": "float,cv::Rect_<float>::width",
    "&cv::Rect_<float>::height": "float,cv::Rect_<float>::height",
    "&cv::RotatedRect::center": "Point2f,cv::RotatedRect::center",
    "&cv::RotatedRect::size": "Size2f,cv::RotatedRect::size",
    "&cv::RotatedRect::angle": "float,cv::RotatedRect::angle",
    "&binding_utils::MinMaxLoc::minVal": "double,binding_utils::MinMaxLoc::minVal",
    "&binding_utils::MinMaxLoc::maxVal": "double,binding_utils::MinMaxLoc::maxVal",
    "&binding_utils::MinMaxLoc::minLoc": "Point,binding_utils::MinMaxLoc::minLoc",
    "&binding_utils::MinMaxLoc::maxLoc": "Point,binding_utils::MinMaxLoc::maxLoc",
    "&binding_utils::Circle::center": "Point2f,binding_utils::Circle::center",
    "&binding_utils::Circle::radius": "float,binding_utils::Circle::radius",
    "&cv::Moments::m00": "double,cv::Moments::m00",
    "&cv::Moments::m10": "double,cv::Moments::m10",
    "&cv::Moments::m01": "double,cv::Moments::m01",
    "&cv::Moments::m20": "double,cv::Moments::m20",
    "&cv::Moments::m11": "double,cv::Moments::m11",
    "&cv::Moments::m02": "double,cv::Moments::m02",
    "&cv::Moments::m30": "double,cv::Moments::m30",
    "&cv::Moments::m21": "double,cv::Moments::m21",
    "&cv::Moments::m12": "double,cv::Moments::m12",
    "&cv::Moments::m03": "double,cv::Moments::m03",
    "&cv::Moments::mu20": "double,cv::Moments::mu20",
    "&cv::Moments::mu11": "double,cv::Moments::mu11",
    "&cv::Moments::mu02": "double,cv::Moments::mu02",
    "&cv::Moments::mu30": "double,cv::Moments::mu30",
    "&cv::Moments::mu21": "double,cv::Moments::mu21",
    "&cv::Moments::mu12": "double,cv::Moments::mu12",
    "&cv::Moments::mu03": "double,cv::Moments::mu03",
    "&cv::Moments::nu20": "double,cv::Moments::nu20",
    "&cv::Moments::nu11": "double,cv::Moments::nu11",
    "&cv::Moments::nu02": "double,cv::Moments::nu02",
    "&cv::Moments::nu30": "double,cv::Moments::nu30",
    "&cv::Moments::nu21": "double,cv::Moments::nu21",
    "&cv::Moments::nu12": "double,cv::Moments::nu12",
    "&cv::Moments::nu03": "double,cv::Moments::nu03",
    "&cv::Exception::code": "int,cv::Exception::code",
    "&binding_utils::getExceptionMsg": "select_overload<std::string(const cv::Exception&)>(&binding_utils::getExceptionMsg)",
    "&binding_utils::setExceptionMsg": "select_overload<void(cv::Exception&, std::string)>(&binding_utils::setExceptionMsg)",
    "&binding_utils::exceptionFromPtr, allow_raw_pointers()": "select_overload<cv::Exception(intptr_t)>(&binding_utils::exceptionFromPtr)",
    "&cv::morphologyDefaultBorderValue": "select_overload<Scalar()>(&cv::morphologyDefaultBorderValue)",
    "&binding_utils::cvMatDepth": "select_overload<int(int)>(&binding_utils::cvMatDepth)",
    "&binding_utils::getBuildInformation": "select_overload<std::string()>(&binding_utils::getBuildInformation)",
    "&cv::HOGDescriptor::winSize": "Size,cv::HOGDescriptor::winSize",
    "&cv::HOGDescriptor::blockSize": "Size,cv::HOGDescriptor::blockSize",
    "&cv::HOGDescriptor::blockStride": "Size,cv::HOGDescriptor::blockStride",
    "&cv::HOGDescriptor::cellSize": "Size,cv::HOGDescriptor::cellSize",
    "&cv::HOGDescriptor::nbins": "int,cv::HOGDescriptor::nbins",
    "&cv::HOGDescriptor::derivAperture": "int,cv::HOGDescriptor::derivAperture",
    "&cv::HOGDescriptor::winSigma": "double,cv::HOGDescriptor::winSigma",
    "&cv::HOGDescriptor::histogramNormType": "int,cv::HOGDescriptor::histogramNormType",
    "&cv::HOGDescriptor::L2HysThreshold": "double,cv::HOGDescriptor::L2HysThreshold",
    "&cv::HOGDescriptor::gammaCorrection": "bool,cv::HOGDescriptor::gammaCorrection",
    "&cv::HOGDescriptor::svmDetector": "std::vector<float>,cv::HOGDescriptor::svmDetector",
    "&cv::HOGDescriptor::nlevels": "int,cv::HOGDescriptor::nlevels",
    "&cv::HOGDescriptor::signedGradient": "bool,cv::HOGDescriptor::signedGradient",
    "binding_utils::rotatedRectPoints": "[Point2f]",
    "binding_utils::CamShiftWrapper": "[Rect]",
    "binding_utils::meanShiftWrapper": "[Rect]",
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<char>)": [
        "val,[char]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<unsigned char>)": [
        "val,[unsigned char]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<short>)": [
        "val,[short]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<unsigned short>)": [
        "val,[unsigned short]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<int>)": [
        "val,[int]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<float>)": [
        "val,[float]"
    ],
    "select_overload<val(const Mat&, int)>(&binding_utils::matPtr<double>)": [
        "val,[double]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<char>)": [
        "val,[char]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<unsigned char>)": [
        "val,[unsigned char]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<short>)": [
        "val,[short]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<unsigned short>)": [
        "val,[unsigned short]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<int>)": [
        "val,[int]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<float>)": [
        "val,[float]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::matData<double>)": [
        "val,[double]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::getMatSize)": [
        "val,[size_t]"
    ],
    "select_overload<val(const cv::Mat&)>(&binding_utils::getMatStep)": [
        "val,[size_t]"
    ],
    "select_overload<void(const std::vector<cv::Mat>&, const emscripten::val&, const cv::Mat&, cv::Mat&, const emscripten::val&, const emscripten::val&, bool)>(&Wrappers::calcHist_wrapper)": [
        "val,[int]",
        "val,[int]",
        "val,[float]"
    ],
    "select_overload<void(const std::vector<cv::Mat>&, const emscripten::val&, const cv::Mat&, cv::Mat&, const emscripten::val&, const emscripten::val&)>(&Wrappers::calcHist_wrapper_1)": [
        "val,[int]",
        "val,[int]",
        "val,[float]"
    ]
}